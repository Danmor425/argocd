apiVersion: v1
kind: Namespace
metadata:
  name: rp-ingress
---
kind: Service
apiVersion: v1
metadata:
  name: home
  namespace: rp-ingress
spec:
  ports:
    - name: home-5000   
      protocol: TCP 
      port: 5000       
    - name: home-5001   
      protocol: TCP
      port: 5001       
  type: ExternalName
  externalName: 192.168.10.51
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: home-ingress
  namespace: rp-ingress
  annotations:
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
spec:
  ingressClassName: nginx
  rules:
  - host: home.danmor.eu 
    http:
      paths:
      - path: /
        pathType: Prefix  # pathType no longer has a default value in v1; "Exact", "Prefix", or "ImplementationSpecific" must be specified
        backend:
          service:
            name: home # make sure this is same service name as in the service yaml
            port:
              number: 5001 
  tls:
  - hosts:
    -  home.danmor.eu
    secretName: home.danmor.eu-tls # < cert-manager will store the created certificate in this secret.
---
kind: Service
apiVersion: v1
metadata:
  name: deluge
  namespace: rp-ingress
spec:
  ports:   
    - name: deluge-8112
      protocol: TCP
      port: 80
      targetPort: 8112
  type: ExternalName
  externalName: 192.168.10.51
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: deluge-ingress
  namespace: rp-ingress
  annotations:
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
spec:
  ingressClassName: nginx
  rules:
  - host: deluge.danmor.eu 
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: deluge
            port:
              number: 8112
  tls:
  - hosts:
    -  deluge.danmor.eu
    secretName: deluge.danmor.eu-tls
---
kind: Service
apiVersion: v1
metadata:
  name: drive
  namespace: rp-ingress
spec:
  ports:   
    - name: drive-443
      protocol: TCP
      port: 443
  type: ExternalName
  externalName: 192.168.10.51
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: drive-ingress
  namespace: rp-ingress
  annotations:
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
spec:
  ingressClassName: nginx
  rules:
  - host: drive.danmor.eu 
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: drive
            port:
              number: 443
  tls:
  - hosts:
    -  drive.danmor.eu
    secretName: drive.danmor.eu-tls
---
kind: Service
apiVersion: v1
metadata:
  name: foundry
  namespace: rp-ingress
spec:
  ports:   
    - protocol: TCP
      port: 30000
  type: ExternalName
  externalName: 192.168.10.51
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: foundry-ingress
  namespace: rp-ingress
  annotations:
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
spec:
  ingressClassName: nginx
  rules:
  - host: foundry.danmor.eu 
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: foundry
            port:
              number: 30000
  tls:
  - hosts:
    -  foundry.danmor.eu
    secretName: foundry.danmor.eu-tls
---
kind: Service
apiVersion: v1
metadata:
  name: hass
  namespace: rp-ingress
spec:
  ports:   
    - name: hass-8123
      protocol: TCP
      port: 8123
  type: ExternalName
  externalName: 192.168.10.55
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: hass-ingress
  namespace: rp-ingress
  annotations:
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
spec:
  ingressClassName: nginx
  rules:
  - host: hass.danmor.eu 
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: hass
            port:
              number: 8123
  tls:
  - hosts:
    -  hass.danmor.eu
    secretName: hass.danmor.eu-tls
---
kind: Service
apiVersion: v1
metadata:
  name: sonarr
  namespace: rp-ingress
spec:
  ports:   
    - name: sonarr-8989
      protocol: TCP
      port: 8989
  type: ExternalName
  externalName: 192.168.10.51
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: sonarr-ingress
  namespace: rp-ingress
  annotations:
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
spec:
  ingressClassName: nginx
  rules:
  - host: sonarr.danmor.eu 
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: sonarr
            port:
              number: 8989
  tls:
  - hosts:
    -  sonarr.danmor.eu
    secretName: sonarr.danmor.eu-tls
---
kind: Service
apiVersion: v1
metadata:
  name: unifi
  namespace: rp-ingress
spec:
  ports:   
    - name: unifi-443
      protocol: TCP
      port: 443
  type: ExternalName
  externalName: 192.168.10.1
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: unifi-ingress
  namespace: rp-ingress
  annotations:
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
spec:
  ingressClassName: nginx
  rules:
  - host: unifi.danmor.eu 
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: unifi
            port:
              number: 443
  tls:
  - hosts:
    -  unifi.danmor.eu
    secretName: unifi.danmor.eu-tls
---
kind: Service
apiVersion: v1
metadata:
  name: unifids
  namespace: rp-ingress
spec:
  ports:   
    - name: unifids-8443
      protocol: TCP
      port: 8443
  type: ExternalName
  externalName: 192.168.10.51
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: unifids-ingress
  namespace: rp-ingress
  annotations:
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
spec:
  ingressClassName: nginx
  rules:
  - host: unifids.danmor.eu 
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: unifids
            port:
              number: 8443
  tls:
  - hosts:
    -  unifids.danmor.eu
    secretName: unifids.danmor.eu-tls
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: argo-ingress
  namespace: argocd
  annotations:
    nginx.ingress.kubernetes.io/backend-protocol: "HTTPS"
spec:
  ingressClassName: nginx
  rules:
    - host: argocd.danmor.eu
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: argocd-server
                port:
                  number: 443
