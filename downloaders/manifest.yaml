apiVersion: v1
kind: Namespace
metadata:
  name: downloaders
---
apiVersion: v1
kind: PersistentVolume
metadata:
  name: downloads
  namespace: downloaders
spec:
  capacity:
    storage: 1000Gi
  accessModes:
    - ReadWriteMany
  persistentVolumeReclaimPolicy: Retain
  nfs:
    path: "/volume1/downloads/"
    server: "192.168.10.51"
    readOnly: false
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: downloads-claim
  namespace: downloaders
spec:
  volumeName: downloads
  accessModes:
    - ReadWriteMany
  resources:
    requests:
      storage: 1000Gi
---
apiVersion: v1
kind: PersistentVolume
metadata:
  name: tvseries
  namespace: downloaders
spec:
  capacity:
    storage: 1000Gi
  accessModes:
    - ReadWriteMany
  persistentVolumeReclaimPolicy: Retain
  nfs:
    path: "/volume1/tvseries/"
    server: "192.168.10.51"
    readOnly: false
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: tvseries-claim
  namespace: downloaders
spec:
  volumeName: tvseries
  accessModes:
    - ReadWriteMany
  resources:
    requests:
      storage: 1000Gi
---
apiVersion: v1
kind: PersistentVolume
metadata:
  name: movies
  namespace: downloaders
spec:
  capacity:
    storage: 1000Gi
  accessModes:
    - ReadWriteMany
  persistentVolumeReclaimPolicy: Retain
  nfs:
    path: "/volume1/movies/"
    server: "192.168.10.51"
    readOnly: false
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: movies-claim
  namespace: downloaders
spec:
  volumeName: movies
  accessModes:
    - ReadWriteMany
  resources:
    requests:
      storage: 1000Gi
---
apiVersion: v1
kind: PersistentVolume
metadata:
  name: deluge-config
spec:
  accessModes:
  - ReadWriteOnce
  capacity:
    storage: 1Gi
  csi:
    driver: rbd.csi.ceph.com
    fsType: ext4
    nodeStageSecretRef:
      # node stage secret name
      name: csi-rbd-secret
      # node stage secret namespace where above secret is created
      namespace: ceph-csi-rbd
    volumeAttributes:
      # Required options from storageclass parameters need to be added in volumeAttributes
      "clusterID": "78be666a-2ee8-425a-81d4-c938372905d4"
      "pool": "kube"
      "staticVolume": "true"
      "imageFeatures": "layering"
      #mounter: rbd-nbd
    # volumeHandle should be same as rbd image name
    volumeHandle: deluge-config
  persistentVolumeReclaimPolicy: Retain
  # The volumeMode can be either `Filesystem` or `Block` if you are creating Filesystem PVC it should be `Filesystem`, if you are creating Block PV you need to change it to `Block`
  volumeMode: Filesystem
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: deluge-config-claim
  namespace: downloaders
spec:
  volumeName: deluge-config
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi
---
apiVersion: v1
kind: Pod
metadata:
  name: deluge
  labels:
    app.kubernetes.io/name: deluge
spec:
  containers:
  - name: deluge
    image: linuxserver/deluge:2.1.1
    ports:
    - containerPort: 58846
    - containerPort: 58946
    - containerPort: 8112
    env:
    - name: PGID
      value: "100"
    - name: PUID
      value: "1036"
    - name: TZ
      value: "Europe/Rome"
    volumeMounts:
    - name: config
      mountPath: "/config"
    - name: downloads
      mountPath: "/downloads"
  volumes:
  - name: config
    persistentVolumeClaim:
      claimName: deluge-config-claim
  - name: downloads
    persistentVolumeClaim:
      claimName: downloads-claim
---
kind: Service
apiVersion: v1
metadata:
  name: deluge
  namespace: downloaders
spec:
  selector:
    app.kubernetes.io/name: deluge
  ports:   
    - name: deluge-8112
      protocol: TCP
      port: 8112
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: deluge-ingress
  namespace: downloaders
  annotations:
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
spec:
  ingressClassName: nginx
  rules:
  - host: deluge.danmor.eu 
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: deluge
            port:
              number: 8112
  tls:
  - hosts:
    -  deluge.danmor.eu
    secretName: deluge.danmor.eu-tls
---
apiVersion: v1
kind: PersistentVolume
metadata:
  name: prowlarr-config
spec:
  accessModes:
  - ReadWriteOnce
  capacity:
    storage: 1Gi
  csi:
    driver: rbd.csi.ceph.com
    fsType: ext4
    nodeStageSecretRef:
      name: csi-rbd-secret
      namespace: ceph-csi-rbd
    volumeAttributes:
      "clusterID": "78be666a-2ee8-425a-81d4-c938372905d4"
      "pool": "kube"
      "staticVolume": "true"
      "imageFeatures": "layering"
    volumeHandle: prowlarr-config
  persistentVolumeReclaimPolicy: Retain
  volumeMode: Filesystem
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: prowlarr-config-claim
  namespace: downloaders
spec:
  volumeName: prowlarr-config
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi
---
apiVersion: v1
kind: Pod
metadata:
  name: prowlarr
  labels:
    app.kubernetes.io/name: prowlarr
spec:
  containers:
  - name: prowlarr
    image: lscr.io/linuxserver/prowlarr:1.32.2
    ports:
    - containerPort: 9696
    env:
    - name: PGID
      value: "100"
    - name: PUID
      value: "1036"
    - name: TZ
      value: "Europe/Rome"
    volumeMounts:
    - name: config
      mountPath: "/config"
  volumes:
  - name: config
    persistentVolumeClaim:
      claimName: prowlarr-config-claim
---
kind: Service
apiVersion: v1
metadata:
  name: prowlarr
  namespace: downloaders
spec:
  selector:
    app.kubernetes.io/name: prowlarr
  ports:   
    - name: prowlarr-9696
      protocol: TCP
      port: 9696
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: prowlarr-ingress
  namespace: downloaders
  annotations:
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
spec:
  ingressClassName: nginx
  rules:
  - host: prowlarr.danmor.eu 
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: prowlarr
            port:
              number: 9696
  tls:
  - hosts:
    -  prowlarr.danmor.eu
    secretName: prowlarr.danmor.eu-tls
---
apiVersion: v1
kind: PersistentVolume
metadata:
  name: sonarr-config
spec:
  accessModes:
  - ReadWriteOnce
  capacity:
    storage: 1Gi
  csi:
    driver: rbd.csi.ceph.com
    fsType: ext4
    nodeStageSecretRef:
      name: csi-rbd-secret
      namespace: ceph-csi-rbd
    volumeAttributes:
      "clusterID": "78be666a-2ee8-425a-81d4-c938372905d4"
      "pool": "kube"
      "staticVolume": "true"
      "imageFeatures": "layering"
    volumeHandle: sonarr-config
  persistentVolumeReclaimPolicy: Retain
  volumeMode: Filesystem
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: sonarr-config-claim
  namespace: downloaders
spec:
  volumeName: sonarr-config
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi
---
apiVersion: v1
kind: Pod
metadata:
  name: sonarr
  labels:
    app.kubernetes.io/name: sonarr
spec:
  containers:
  - name: sonarr
    image: lscr.io/linuxserver/sonarr:4.0.14
    ports:
    - containerPort: 8989
    env:
    - name: PGID
      value: "100"
    - name: PUID
      value: "1036"
    - name: TZ
      value: "Europe/Rome"
    volumeMounts:
    - name: config
      mountPath: "/config"
    - name: downloads
      mountPath: "/downloads"
    - name: tvseries
      mountPath: "/tv"
  volumes:
  - name: config
    persistentVolumeClaim:
      claimName: sonarr-config-claim
  - name: downloads
    persistentVolumeClaim:
      claimName: downloads-claim
  - name: tvseries
    persistentVolumeClaim:
      claimName: tvseries-claim
---
kind: Service
apiVersion: v1
metadata:
  name: sonarr
  namespace: downloaders
spec:
  selector:
    app.kubernetes.io/name: sonarr
  ports:   
    - name: sonarr-8989
      protocol: TCP
      port: 8989
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: sonarr-ingress
  namespace: downloaders
  annotations:
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
spec:
  ingressClassName: nginx
  rules:
  - host: sonarr.danmor.eu 
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: sonarr
            port:
              number: 8989
  tls:
  - hosts:
    -  sonarr.danmor.eu
    secretName: sonarr.danmor.eu-tls
---
apiVersion: v1
kind: PersistentVolume
metadata:
  name: radarr-config
spec:
  accessModes:
  - ReadWriteOnce
  capacity:
    storage: 1Gi
  csi:
    driver: rbd.csi.ceph.com
    fsType: ext4
    nodeStageSecretRef:
      name: csi-rbd-secret
      namespace: ceph-csi-rbd
    volumeAttributes:
      "clusterID": "78be666a-2ee8-425a-81d4-c938372905d4"
      "pool": "kube"
      "staticVolume": "true"
      "imageFeatures": "layering"
    volumeHandle: radarr-config
  persistentVolumeReclaimPolicy: Retain
  volumeMode: Filesystem
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: radarr-config-claim
  namespace: downloaders
spec:
  volumeName: radarr-config
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi
---
apiVersion: v1
kind: Pod
metadata:
  name: radarr
  labels:
    app.kubernetes.io/name: radarr
spec:
  containers:
  - name: radarr
    image: lscr.io/linuxserver/radarr:5.20.2
    ports:
    - containerPort: 7878
    env:
    - name: PGID
      value: "100"
    - name: PUID
      value: "1036"
    - name: TZ
      value: "Europe/Rome"
    volumeMounts:
    - name: config
      mountPath: "/config"
    - name: downloads
      mountPath: "/downloads"
    - name: movies
      mountPath: "/movies"
  volumes:
  - name: config
    persistentVolumeClaim:
      claimName: radarr-config-claim
  - name: downloads
    persistentVolumeClaim:
      claimName: downloads-claim
  - name: movies
    persistentVolumeClaim:
      claimName: movies-claim
---
kind: Service
apiVersion: v1
metadata:
  name: radarr
  namespace: downloaders
spec:
  selector:
    app.kubernetes.io/name: radarr
  ports:   
    - name: radarr-7878
      protocol: TCP
      port: 7878
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: radarr-ingress
  namespace: downloaders
  annotations:
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
spec:
  ingressClassName: nginx
  rules:
  - host: radarr.danmor.eu 
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: radarr
            port:
              number: 7878
  tls:
  - hosts:
    -  radarr.danmor.eu
    secretName: radarr.danmor.eu-tls
---
apiVersion: v1
kind: PersistentVolume
metadata:
  name: whp
  namespace: downloaders
spec:
  capacity:
    storage: 1000Gi
  accessModes:
    - ReadWriteMany
  persistentVolumeReclaimPolicy: Retain
  nfs:
    path: "/volume1/whp/"
    server: "192.168.10.51"
    readOnly: false
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: whp-claim
  namespace: downloaders
spec:
  volumeName: whp
  accessModes:
    - ReadWriteMany
  resources:
    requests:
      storage: 1000Gi
---
apiVersion: v1
kind: PersistentVolume
metadata:
  name: whp-config
spec:
  accessModes:
  - ReadWriteOnce
  capacity:
    storage: 1Gi
  csi:
    driver: rbd.csi.ceph.com
    fsType: ext4
    nodeStageSecretRef:
      name: csi-rbd-secret
      namespace: ceph-csi-rbd
    volumeAttributes:
      "clusterID": "78be666a-2ee8-425a-81d4-c938372905d4"
      "pool": "kube"
      "staticVolume": "true"
      "imageFeatures": "layering"
    volumeHandle: whp-config
  persistentVolumeReclaimPolicy: Retain
  volumeMode: Filesystem
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: whp-config-claim
  namespace: downloaders
spec:
  volumeName: whp-config
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi
---
apiVersion: v1
kind: Pod
metadata:
  name: whp
  labels:
    app.kubernetes.io/name: whp
spec:
  containers:
  - name: whp
    image: hotio/whisparr:nightly-2.0.0.891
    ports:
    - containerPort: 6969
    env:
    - name: PGID
      value: "100"
    - name: PUID
      value: "1036"
    - name: TZ
      value: "Europe/Rome"
    volumeMounts:
    - name: config
      mountPath: "/config"
    - name: downloads
      mountPath: "/downloads"
    - name: whp
      mountPath: "/data"
  volumes:
  - name: config
    persistentVolumeClaim:
      claimName: whp-config-claim
  - name: downloads
    persistentVolumeClaim:
      claimName: downloads-claim
  - name: whp
    persistentVolumeClaim:
      claimName: whp-claim
---
kind: Service
apiVersion: v1
metadata:
  name: whp
  namespace: downloaders
spec:
  selector:
    app.kubernetes.io/name: whp
  ports:   
    - name: whp-6969
      protocol: TCP
      port: 6969
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: whp-ingress
  namespace: downloaders
spec:
  ingressClassName: nginx
  rules:
  - host: whp.danmor.eu 
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: whp
            port:
              number: 6969
